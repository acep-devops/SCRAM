---
- hosts: scram
  vars:
    scram_nginx_ssl: '/etc/scram/ssl'
    scram_oidc_client_secret: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      36616434663733303134353961393233613635623730346565656133333964386239353035616238
      6437353134333639613465326137656135353162613730620a306432613232396362633561386132
      37373363366132666538323165306334393236303836323434646661323737336234643232353163
      6532343935346164610a656663383162393533626437303466353562333730666665373138656161
      35636430383439306530363564373133663438393632306536666437633435633839386137366666
      3062366433353763383766633063323438623238616234623939
    scram_django_secret_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      37353133393361393233336139383865636231303334353931303165323930353535396163353436
      3563623631393434313631633031323961353561396133380a626333313432313136336336623038
      37396635633362393932393663323631396534613930373139383066303938613765633736366337
      6335373633373366300a623865613063393663386462386330303330336665643833393434343663
      36613932393736326636343631626161313230396565383133363236663338396536313962633263
      62326532666538666538376363613362313862636334663237636138353630316233646363356630
      353430346234656337323438393735386166
    scram_postgres_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      35623464383232386362393866353633376138646134326538303362633134366437653861343832
      6337303431666438303134336162316134616235316632310a356463323034353465623461643036
      30306331646536613762656561366630636239666463363431613965333066306136353062323232
      3038656562373762300a343063663333366535323862613763373261373638383136643134653431
      61326336613964323563643330386465343431333338666561633337653464646564613762653439
      63303035386362356638326164343766626434386438633139616631313063633534316262623637
      34386533333964383437386563373865636533633239666434656463356534653132626264623736
      36616463353939616566
  tasks:
    - block:
      - name: Create SCRAM group
        group:
          name: "{{ scram_user }}"
          state: present

      - name: Create SCRAM user
        user:
          name: "{{ scram_user }}"
          comment: "SCRAM User"
          group: "{{ scram_group }}"
          uid: "{{ scram_uid }}"
      when: "'mac' not in group_names and scram_install_user|bool"

    - name: Turn off old containers
      make:
        chdir: "{{ scram_home }}"
        target: down
      failed_when: false

    - name: Remove old code
      file:
        state: absent
        path: "{{ scram_home }}"

    - name: Clone SCRAM repository
      git:
        repo: https://gitlab.es.net/security/scram.git
        dest: "{{ scram_home }}"
        version: "{{ scram_code_branch }}"
        force: true

    - block:
      - name: Create production .env files
        file:
          path: "{{ scram_home }}/.envs/.production"
          state: directory
          owner: "{{ scram_user }}"
          group: "{{ scram_group }}"

      - name: Deploy environment variable templates
        template:
          src: "ansible/{{ item }}.env.j2"
          dest: "{{ scram_home }}/.envs/.production/.{{ item }}"
          owner: "{{ scram_user }}"
          group: "{{ scram_group }}"
        loop:
          - django
          - postgres
      when: scram_prod

    - block:
      - name: Create prod nginx directory
        file:
          state: directory
          path: "{{ scram_home }}/compose/production/nginx"
          owner: "{{ scram_user }}"
          group: "{{ scram_group }}"

      - name: Deploy nginx config
        template:
          src: "ansible/nginx.conf.j2"
          dest: "{{ scram_home }}/compose/production/nginx/nginx.conf"
          owner: "{{ scram_user }}"
          group: "{{ scram_group }}"
        when: "'localhost' not in inventory_hostname"

      - name: Deploy local nginx config
        template:
          src: "ansible/nginx-local.conf.j2"
          dest: "{{ scram_home }}/compose/production/nginx/nginx.conf"
          owner: "{{ scram_user }}"
          group: "{{ scram_group }}"
        when: "'localhost' in inventory_hostname"
      tags:
        - configs

    - block:
      - name: Ensure SSL directory exists when in staging/production
        file:
          path: "{{ scram_nginx_ssl }}"
          state: directory
          owner: root
          group: root
        when: "'localhost' not in inventory_hostname"

        # This adds the volumes for nginx cert stuff to work
        # since we don't run certs in the prod-on-local situation we don't want that
      - name: Remove cert mounts for SSL on prod on local
        lineinfile:
          path: "{{ scram_home }}/production.yml"
          state: absent
          line: "{{ item }}"
        loop:
          - "^- /etc/scram/ssl/server.crt:/etc/ssl/server.crt"
          - "^- /etc/scram/ssl/server.key:/etc/ssl/server.key"
        when: "'localhost' in inventory_hostname"

      - name: Toggle prod
        make:
          chdir: "{{ scram_home }}"
          target: toggle-prod
        changed_when: false

      when: scram_prod

    - name: Toggle local
      make:
        chdir: "{{ scram_home }}"
        target: toggle-local
      changed_when: false
      when: not scram_prod

    - name: Build and start docker-compose stack
      make:
        chdir: "{{ scram_home }}"
        target: "{{ item }}"
      loop:
        - build
        - run

    - name: Run django migrations
      make:
        chdir: "{{ scram_home }}"
        target: migrate
      tags:
        - migrations

    - name: Grab the django URL
      make:
        chdir: "{{ scram_home }}"
        target: django-url
      register: django_url

    - block:
      - name: Show django URL
        debug:
          var: django_url.stdout
        failed_when: '"http:// " | string in django_url.stdout'
      rescue:
        - name: Just show localhost URL when appropriate
          debug:
            msg: "https://localhost/"
